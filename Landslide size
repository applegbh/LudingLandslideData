import geopandas as gpd
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import mean_squared_error, mean_absolute_error,r2_score

gdf = gpd.read_file(r'E:\LuDdata\Landslide Size File\Vel_result\Su_with_AllFactor_Merge.shp')

factor_names = ["Aspect_m", "Aspect_s", "Slope_m", "Slope_s", "PLC_m", "PRC_m", "Fault_m", "Lith_magor",
                "LULC_magor", "Road_m", "River_m","PGA_3M_s", "PAG_3M_m","travel_ang", "travel_dis","travel_h", "Avg_Veloci"]

X = gdf[factor_names].values
y = gdf['Area_SUM'].values
y_log = np.log1p(y)

n_splits = 10
kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)


predictions = np.zeros_like(y_log)
fold_metrics = []

for fold_index, (train_index, test_index) in enumerate(kf.split(X)):
    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y_log[train_index], y_log[test_index]

    mod_rf = RandomForestRegressor(n_estimators=300, max_depth=20).fit(X_train, y_train)
    y_pred = mod_rf.predict(X_test)
    predictions[test_index] = y_pred
    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r = r2_score(y_test, y_pred)
    nse = 1 - (np.sum((y_test - y_pred) ** 2) / np.sum((y_test - np.mean(y_test)) ** 2))
    correlation_coefficient = np.corrcoef(y_test, y_pred)[0, 1]


    fold_metrics.append({
        'Fold': fold_index + 1,
        'MAE': mae,
        'MSE': mse,
        'RMSE': rmse,
        'R2': r,
        'NSE': nse,
        'R': correlation_coefficient
    })


    fold_data = gdf.iloc[np.concatenate((train_index, test_index))].copy()
    fold_data['Dataset'] = 1  
    fold_data.loc[test_index, 'Dataset'] = 2  


    fold_data = fold_data.sort_values(by='OBJECTID')


    fold_gdf = gpd.GeoDataFrame({
        'geometry': fold_data.geometry,
        'Dataset': fold_data['Dataset']
    })



predicted_df = pd.DataFrame({
    'OBJECTID': gdf['OBJECTID'], 
    'Area_SUM_1': np.log1p(gdf['Area_SUM_1']),  
    'PredGAM': predictions
})


new_gdf = gpd.GeoDataFrame({
    'geometry': gdf.geometry, 
    'Area_SUM_1': predicted_df['Area_SUM_1'],
    'PredGAM': predicted_df['PredGAM']
})

print(metrics_df)


################SCV
from sklearn.utils import shuffle
gdf1 = shuffle(gdf, random_state=42)
gdf1['Fold'] = np.floor(np.linspace(0, n_splits, len(gdf1))).astype(int)  


predictions = np.zeros_like(y_log)
fold_metrics = []

for fold_index in range(n_splits):
 
    train_index = gdf1[gdf1['Fold'] != fold_index].index
    test_index = gdf1[gdf1['Fold'] == fold_index].index

    X_train, X_test = X[train_index], X[test_index]
    y_train, y_test = y_log[train_index], y_log[test_index]


    mod_rf = RandomForestRegressor(n_estimators=300, max_depth=20).fit(X_train, y_train)


    y_pred = mod_rf.predict(X_test)


    predictions[test_index] = y_pred


    mse = mean_squared_error(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    r = r2_score(y_test, y_pred)
    #mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100

    denominator = np.sum((y_test - np.mean(y_test)) ** 2)
    if denominator == 0:
        nse = 0  
    else:
        nse = 1 - (np.sum((y_test - y_pred) ** 2) / denominator)
    # nse = 1 - (np.sum((y_test - y_pred) ** 2) / np.sum((y_test - np.mean(y_test)) ** 2))
    if np.std(y_test) == 0:
        correlation_coefficient = np.nan
    else:
        correlation_coefficient = np.corrcoef(y_test, y_pred)[0, 1]
    # correlation_coefficient = np.corrcoef(y_test, y_pred)[0, 1]

    fold_metrics.append({
        'Fold': fold_index + 1,
        'MAE': mae,
        'MSE': mse,
        'RMSE': rmse,
        'R2': r,
        'NSE': nse,
        'R': correlation_coefficient
    })

    fold_data = gdf.copy()
    fold_data['Dataset'] = 1  
    fold_data.loc[test_index, 'Dataset'] = 2  


    fold_data = fold_data.sort_values(by='OBJECTID')


    fold_gdf = gpd.GeoDataFrame({
        'geometry': fold_data.geometry,
        'Dataset': fold_data['Dataset']
    })

    # fold_gdf.to_file(r'E:\LuDdata\Landslide Size File\Vel_result\RF\SCVRF-{}.shp'.format(fold_index + 1))


predicted_df = pd.DataFrame({
    'OBJECTID': gdf['OBJECTID'],  
    'Area_SUM': np.log1p(gdf['Area_SUM']),  
    'PredGAM': predictions
})


new_gdf = gpd.GeoDataFrame({
    'geometry': gdf.geometry, 
    'Area_SUM': predicted_df['Area_SUM'],
    'PredGAM': predicted_df['PredGAM']
})

print(metrics_df)
